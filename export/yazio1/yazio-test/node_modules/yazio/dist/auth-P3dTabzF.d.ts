import { z } from 'zod';

declare const TokenSchema: z.ZodObject<{
    token_type: z.ZodString;
    access_token: z.ZodString;
    refresh_token: z.ZodString;
    expires_in: z.ZodNumber;
    expires_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    token_type: string;
    access_token: string;
    refresh_token: string;
    expires_in: number;
    expires_at: number;
}, {
    token_type: string;
    access_token: string;
    refresh_token: string;
    expires_in: number;
    expires_at: number;
}>;
type Token = z.infer<typeof TokenSchema>;
declare const TokenResolverSchema: z.ZodUnion<[z.ZodObject<{
    token_type: z.ZodString;
    access_token: z.ZodString;
    refresh_token: z.ZodString;
    expires_in: z.ZodNumber;
    expires_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    token_type: string;
    access_token: string;
    refresh_token: string;
    expires_in: number;
    expires_at: number;
}, {
    token_type: string;
    access_token: string;
    refresh_token: string;
    expires_in: number;
    expires_at: number;
}>, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnion<[z.ZodObject<{
    token_type: z.ZodString;
    access_token: z.ZodString;
    refresh_token: z.ZodString;
    expires_in: z.ZodNumber;
    expires_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    token_type: string;
    access_token: string;
    refresh_token: string;
    expires_in: number;
    expires_at: number;
}, {
    token_type: string;
    access_token: string;
    refresh_token: string;
    expires_in: number;
    expires_at: number;
}>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
    token_type: z.ZodString;
    access_token: z.ZodString;
    refresh_token: z.ZodString;
    expires_in: z.ZodNumber;
    expires_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    token_type: string;
    access_token: string;
    refresh_token: string;
    expires_in: number;
    expires_at: number;
}, {
    token_type: string;
    access_token: string;
    refresh_token: string;
    expires_in: number;
    expires_at: number;
}>, z.ZodNull]>>, z.ZodNull]>>]>;
type TokenResolver = z.infer<typeof TokenResolverSchema>;
declare const CredentialsSchema: z.ZodObject<{
    username: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    username: string;
    password: string;
}, {
    username: string;
    password: string;
}>;
type Credentials = z.infer<typeof CredentialsSchema>;
declare const CredentialsResolverSchema: z.ZodUnion<[z.ZodObject<{
    username: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    username: string;
    password: string;
}, {
    username: string;
    password: string;
}>, z.ZodPromise<z.ZodObject<{
    username: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    username: string;
    password: string;
}, {
    username: string;
    password: string;
}>>, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnion<[z.ZodObject<{
    username: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    username: string;
    password: string;
}, {
    username: string;
    password: string;
}>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
    username: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    username: string;
    password: string;
}, {
    username: string;
    password: string;
}>, z.ZodNull]>>, z.ZodNull]>>, z.ZodPromise<z.ZodObject<{
    username: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    username: string;
    password: string;
}, {
    username: string;
    password: string;
}>>]>;
type CredentialsResolver = z.infer<typeof CredentialsResolverSchema>;
declare const YazioAuthInitSchema: z.ZodUnion<[z.ZodObject<{
    credentials: z.ZodUnion<[z.ZodObject<{
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        username: string;
        password: string;
    }, {
        username: string;
        password: string;
    }>, z.ZodPromise<z.ZodObject<{
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        username: string;
        password: string;
    }, {
        username: string;
        password: string;
    }>>, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnion<[z.ZodObject<{
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        username: string;
        password: string;
    }, {
        username: string;
        password: string;
    }>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        username: string;
        password: string;
    }, {
        username: string;
        password: string;
    }>, z.ZodNull]>>, z.ZodNull]>>, z.ZodPromise<z.ZodObject<{
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        username: string;
        password: string;
    }, {
        username: string;
        password: string;
    }>>]>;
    token: z.ZodUndefined;
    onRefresh: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        token: z.ZodObject<{
            token_type: z.ZodString;
            access_token: z.ZodString;
            refresh_token: z.ZodString;
            expires_in: z.ZodNumber;
            expires_at: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        }, {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        token: {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        };
    }, {
        token: {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        };
    }>], z.ZodUnknown>, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    credentials: ({
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    }> | ((...args: unknown[]) => {
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    } | null> | null)) & ({
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    }> | ((...args: unknown[]) => {
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    } | null> | null) | undefined);
    token?: undefined;
    onRefresh?: ((args_0: {
        token: {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        };
    }, ...args_1: unknown[]) => any) | undefined;
}, {
    credentials: ({
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    }> | ((...args: unknown[]) => {
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    } | null> | null)) & ({
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    }> | ((...args: unknown[]) => {
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    } | null> | null) | undefined);
    token?: undefined;
    onRefresh?: ((args_0: {
        token: {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        };
    }, ...args_1: unknown[]) => any) | undefined;
}>, z.ZodObject<{
    credentials: z.ZodUndefined;
    token: z.ZodUnion<[z.ZodObject<{
        token_type: z.ZodString;
        access_token: z.ZodString;
        refresh_token: z.ZodString;
        expires_in: z.ZodNumber;
        expires_at: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    }, {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    }>, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnion<[z.ZodObject<{
        token_type: z.ZodString;
        access_token: z.ZodString;
        refresh_token: z.ZodString;
        expires_in: z.ZodNumber;
        expires_at: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    }, {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    }>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
        token_type: z.ZodString;
        access_token: z.ZodString;
        refresh_token: z.ZodString;
        expires_in: z.ZodNumber;
        expires_at: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    }, {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    }>, z.ZodNull]>>, z.ZodNull]>>]>;
    onRefresh: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        token: z.ZodObject<{
            token_type: z.ZodString;
            access_token: z.ZodString;
            refresh_token: z.ZodString;
            expires_in: z.ZodNumber;
            expires_at: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        }, {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        token: {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        };
    }, {
        token: {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        };
    }>], z.ZodUnknown>, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    token: ({
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | ((...args: unknown[]) => {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | Promise<{
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | null> | null)) & ({
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | ((...args: unknown[]) => {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | Promise<{
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | null> | null) | undefined);
    credentials?: undefined;
    onRefresh?: ((args_0: {
        token: {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        };
    }, ...args_1: unknown[]) => any) | undefined;
}, {
    token: ({
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | ((...args: unknown[]) => {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | Promise<{
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | null> | null)) & ({
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | ((...args: unknown[]) => {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | Promise<{
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | null> | null) | undefined);
    credentials?: undefined;
    onRefresh?: ((args_0: {
        token: {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        };
    }, ...args_1: unknown[]) => any) | undefined;
}>, z.ZodObject<{
    credentials: z.ZodUnion<[z.ZodObject<{
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        username: string;
        password: string;
    }, {
        username: string;
        password: string;
    }>, z.ZodPromise<z.ZodObject<{
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        username: string;
        password: string;
    }, {
        username: string;
        password: string;
    }>>, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnion<[z.ZodObject<{
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        username: string;
        password: string;
    }, {
        username: string;
        password: string;
    }>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        username: string;
        password: string;
    }, {
        username: string;
        password: string;
    }>, z.ZodNull]>>, z.ZodNull]>>, z.ZodPromise<z.ZodObject<{
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        username: string;
        password: string;
    }, {
        username: string;
        password: string;
    }>>]>;
    token: z.ZodUnion<[z.ZodObject<{
        token_type: z.ZodString;
        access_token: z.ZodString;
        refresh_token: z.ZodString;
        expires_in: z.ZodNumber;
        expires_at: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    }, {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    }>, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnion<[z.ZodObject<{
        token_type: z.ZodString;
        access_token: z.ZodString;
        refresh_token: z.ZodString;
        expires_in: z.ZodNumber;
        expires_at: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    }, {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    }>, z.ZodPromise<z.ZodUnion<[z.ZodObject<{
        token_type: z.ZodString;
        access_token: z.ZodString;
        refresh_token: z.ZodString;
        expires_in: z.ZodNumber;
        expires_at: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    }, {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    }>, z.ZodNull]>>, z.ZodNull]>>]>;
    onRefresh: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        token: z.ZodObject<{
            token_type: z.ZodString;
            access_token: z.ZodString;
            refresh_token: z.ZodString;
            expires_in: z.ZodNumber;
            expires_at: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        }, {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        token: {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        };
    }, {
        token: {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        };
    }>], z.ZodUnknown>, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    credentials: ({
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    }> | ((...args: unknown[]) => {
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    } | null> | null)) & ({
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    }> | ((...args: unknown[]) => {
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    } | null> | null) | undefined);
    token: ({
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | ((...args: unknown[]) => {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | Promise<{
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | null> | null)) & ({
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | ((...args: unknown[]) => {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | Promise<{
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | null> | null) | undefined);
    onRefresh?: ((args_0: {
        token: {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        };
    }, ...args_1: unknown[]) => any) | undefined;
}, {
    credentials: ({
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    }> | ((...args: unknown[]) => {
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    } | null> | null)) & ({
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    }> | ((...args: unknown[]) => {
        username: string;
        password: string;
    } | Promise<{
        username: string;
        password: string;
    } | null> | null) | undefined);
    token: ({
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | ((...args: unknown[]) => {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | Promise<{
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | null> | null)) & ({
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | ((...args: unknown[]) => {
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | Promise<{
        token_type: string;
        access_token: string;
        refresh_token: string;
        expires_in: number;
        expires_at: number;
    } | null> | null) | undefined);
    onRefresh?: ((args_0: {
        token: {
            token_type: string;
            access_token: string;
            refresh_token: string;
            expires_in: number;
            expires_at: number;
        };
    }, ...args_1: unknown[]) => any) | undefined;
}>]>;
type YazioAuthInit = z.infer<typeof YazioAuthInitSchema>;

export type { Credentials as C, Token as T, YazioAuthInit as Y, TokenResolver as a, CredentialsResolver as b };
