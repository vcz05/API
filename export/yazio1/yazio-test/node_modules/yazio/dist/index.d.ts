import { YazioAuth } from './auth.js';
import { Y as YazioAuthInit } from './auth-BtDcQtvk.js';
import { g as getProduct, s as searchProducts, a as getUserWeight, b as getUserSuggestedProducts, c as getUserExercises, d as getUserGoals, e as getUserWaterIntake, f as getUserDailySummary, h as getUserConsumedItems, i as addUserConsumedItem, r as removeUserConsumedItem } from './water-atGly5Yn.js';
import 'zod';

declare class Products {
    private auth;
    constructor(auth: YazioAuth);
    get: (id: Parameters<typeof getProduct>[1]) => Promise<{
        id: string;
        name: string;
        is_verified: boolean;
        is_private: boolean;
        is_deleted: boolean;
        has_ean: boolean;
        category: string;
        producer: string | null;
        nutrients: {
            "energy.energy": number;
            "mineral.calcium": number;
            "mineral.chlorine": number;
            "mineral.copper": number;
            "mineral.fluorine": number;
            "mineral.iron": number;
            "mineral.magnesium": number;
            "mineral.manganese": number;
            "mineral.phosphorus": number;
            "mineral.potassium": number;
            "mineral.sulfur": number;
            "mineral.zinc": number;
            "nutrient.carb": number;
            "nutrient.dietaryfiber": number;
            "nutrient.fat": number;
            "nutrient.protein": number;
            "nutrient.sugar": number;
            "vitamin.a": number;
            "vitamin.b1": number;
            "vitamin.b12": number;
            "vitamin.b2": number;
            "vitamin.b6": number;
            "vitamin.d": number;
            "vitamin.e": number;
        };
        updated_at: string;
        servings: {
            serving: string;
            amount: number;
        }[];
        base_unit: string;
        eans: string[];
        language: string;
        countries: string[];
    } | null>;
    search: (options: Parameters<typeof searchProducts>[1]) => Promise<{
        serving: string;
        amount: number;
        name: string;
        is_verified: boolean;
        producer: string;
        nutrients: {
            "energy.energy": number;
            "nutrient.carb": number;
            "nutrient.fat": number;
            "nutrient.protein": number;
        };
        base_unit: string;
        language: string;
        countries: string[];
        score: number;
        product_id: string;
        serving_quantity: number;
    }[]>;
}
declare class User {
    private auth;
    constructor(auth: YazioAuth);
    get: () => Promise<{
        sex: "male" | "female" | "other";
        unit_mass: string;
        unit_energy: string;
        unit_serving: string;
        unit_length: string;
        start_weight: number;
        goal: string;
        diet: {
            name: string;
            carb_percentage: number;
            fat_percentage: number;
            protein_percentage: number;
        } | null;
        email: string;
        premium_type: string;
        first_name: string;
        last_name: string;
        city: string;
        country: string;
        weight_change_per_week: number;
        body_height: number;
        date_of_birth: string;
        registration_date: string;
        timezone_offset: number;
        unit_glucose: string;
        food_database_country: string;
        profile_image: string;
        user_token: string;
        email_confirmation_status: "confirmed" | "unconfirmed";
        newsletter_opt_in: boolean;
        login_type: string;
        siwa_user_id: string | null;
        uuid: string;
        reset_date: string | null;
        activity_degree: string;
        stripe_customer_id: string | null;
    }>;
    getWeight: (options?: Parameters<typeof getUserWeight>[1]) => Promise<{
        value: number | null;
        date: string;
        id: string;
        external_id: string | null;
        gateway: string | null;
        source: string | null;
    } | null>;
    getSuggestedProducts: (options: Parameters<typeof getUserSuggestedProducts>[1]) => Promise<{
        serving: string | null;
        amount: number;
        product_id: string;
        serving_quantity: number | null;
    }[]>;
    getDietaryPreferences: () => Promise<{
        restriction: string | null;
    }>;
    getExercises: (options: Parameters<typeof getUserExercises>[1]) => Promise<{
        training: {
            date: string;
            id: string;
            name: string;
            external_id: string | null;
            gateway: string | null;
            source: string | null;
            note: string | null;
            energy: number;
            distance: number;
            duration: number;
            steps: number;
        }[];
        custom_training: {
            date: string;
            id: string;
            name: string;
            external_id: string | null;
            gateway: string | null;
            source: string | null;
            note: string | null;
            energy: number;
            distance: number;
            duration: number;
            steps: number;
        }[];
    }>;
    getGoals: (options: Parameters<typeof getUserGoals>[1]) => Promise<{
        "energy.energy": number;
        "nutrient.carb": number;
        "nutrient.fat": number;
        "nutrient.protein": number;
        "activity.step": number;
        "bodyvalue.weight": number;
        water: number;
    }>;
    getSettings: () => Promise<{
        has_water_tracker: boolean;
        has_diary_tipps: boolean;
        has_meal_reminders: boolean;
        has_usage_reminders: boolean;
        has_weight_reminders: boolean;
        has_water_reminders: boolean;
        consume_activity_calories: boolean;
        has_feelings: boolean;
        has_fasting_tracker_reminders: boolean;
        has_fasting_stage_reminders: boolean;
    }>;
    getWaterIntake: (options: Parameters<typeof getUserWaterIntake>[1]) => Promise<{
        gateway: string | null;
        source: string | null;
        water_intake: number;
    }>;
    getDailySummary: (options: Parameters<typeof getUserDailySummary>[1]) => Promise<{
        steps: number;
        activity_energy: number;
        consume_activity_energy: boolean;
        water_intake: number;
        goals: {
            "energy.energy": number;
            "nutrient.carb": number;
            "nutrient.fat": number;
            "nutrient.protein": number;
            "activity.step": number;
            "bodyvalue.weight": number;
            water: number;
        };
        units: {
            unit_mass: string;
            unit_energy: string;
            unit_serving: string;
            unit_length: string;
        };
        meals: {
            breakfast: {
                nutrients: {
                    "energy.energy": number;
                    "nutrient.carb": number;
                    "nutrient.fat": number;
                    "nutrient.protein": number;
                };
                energy_goal: number;
            };
            lunch: {
                nutrients: {
                    "energy.energy": number;
                    "nutrient.carb": number;
                    "nutrient.fat": number;
                    "nutrient.protein": number;
                };
                energy_goal: number;
            };
            dinner: {
                nutrients: {
                    "energy.energy": number;
                    "nutrient.carb": number;
                    "nutrient.fat": number;
                    "nutrient.protein": number;
                };
                energy_goal: number;
            };
            snack: {
                nutrients: {
                    "energy.energy": number;
                    "nutrient.carb": number;
                    "nutrient.fat": number;
                    "nutrient.protein": number;
                };
                energy_goal: number;
            };
        };
        user: {
            start_weight?: number | undefined;
            current_weight?: number | undefined;
            goal?: string | undefined;
            sex?: string | undefined;
        };
        active_fasting_countdown_template_key: string | null;
    }>;
    getConsumedItems: (options: Parameters<typeof getUserConsumedItems>[1]) => Promise<{
        products: {
            type: string;
            date: string;
            serving: string | null;
            amount: number;
            id: string;
            product_id: string;
            serving_quantity: number | null;
            daytime: "breakfast" | "lunch" | "dinner" | "snack";
        }[];
        recipe_portions: unknown[];
        simple_products: unknown[];
    }>;
    addConsumedItem: (options: Parameters<typeof addUserConsumedItem>[1]) => Promise<void>;
    removeConsumedItem: (options: Parameters<typeof removeUserConsumedItem>[1]) => Promise<void>;
}
declare class Yazio {
    private auth;
    products: Products;
    user: User;
    /**
     * Create a new YAZIO API client.
     *
     * @param auth - The authentication details. Either in the form of an object
     * containing a previously obtained token pair or account credentials, or an
     * instance of `YazioAuth`.
     */
    constructor(auth: YazioAuth | YazioAuthInit);
}

export { Yazio, YazioAuth };
