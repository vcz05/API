import { T as Token } from './auth-CBhj0jXY.mjs';
import { z } from 'zod';

declare const ProductSchema: z.ZodObject<{
    name: z.ZodString;
    is_verified: z.ZodBoolean;
    is_private: z.ZodBoolean;
    is_deleted: z.ZodBoolean;
    has_ean: z.ZodBoolean;
    category: z.ZodString;
    producer: z.ZodNullable<z.ZodString>;
    nutrients: z.ZodObject<{
        "energy.energy": z.ZodNumber;
        "mineral.calcium": z.ZodNumber;
        "mineral.chlorine": z.ZodNumber;
        "mineral.copper": z.ZodNumber;
        "mineral.fluorine": z.ZodNumber;
        "mineral.iron": z.ZodNumber;
        "mineral.magnesium": z.ZodNumber;
        "mineral.manganese": z.ZodNumber;
        "mineral.phosphorus": z.ZodNumber;
        "mineral.potassium": z.ZodNumber;
        "mineral.sulfur": z.ZodNumber;
        "mineral.zinc": z.ZodNumber;
        "nutrient.carb": z.ZodNumber;
        "nutrient.dietaryfiber": z.ZodNumber;
        "nutrient.fat": z.ZodNumber;
        "nutrient.protein": z.ZodNumber;
        "nutrient.sugar": z.ZodNumber;
        "vitamin.a": z.ZodNumber;
        "vitamin.b1": z.ZodNumber;
        "vitamin.b12": z.ZodNumber;
        "vitamin.b2": z.ZodNumber;
        "vitamin.b6": z.ZodNumber;
        "vitamin.d": z.ZodNumber;
        "vitamin.e": z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        "energy.energy": number;
        "mineral.calcium": number;
        "mineral.chlorine": number;
        "mineral.copper": number;
        "mineral.fluorine": number;
        "mineral.iron": number;
        "mineral.magnesium": number;
        "mineral.manganese": number;
        "mineral.phosphorus": number;
        "mineral.potassium": number;
        "mineral.sulfur": number;
        "mineral.zinc": number;
        "nutrient.carb": number;
        "nutrient.dietaryfiber": number;
        "nutrient.fat": number;
        "nutrient.protein": number;
        "nutrient.sugar": number;
        "vitamin.a": number;
        "vitamin.b1": number;
        "vitamin.b12": number;
        "vitamin.b2": number;
        "vitamin.b6": number;
        "vitamin.d": number;
        "vitamin.e": number;
    }, {
        "energy.energy": number;
        "mineral.calcium": number;
        "mineral.chlorine": number;
        "mineral.copper": number;
        "mineral.fluorine": number;
        "mineral.iron": number;
        "mineral.magnesium": number;
        "mineral.manganese": number;
        "mineral.phosphorus": number;
        "mineral.potassium": number;
        "mineral.sulfur": number;
        "mineral.zinc": number;
        "nutrient.carb": number;
        "nutrient.dietaryfiber": number;
        "nutrient.fat": number;
        "nutrient.protein": number;
        "nutrient.sugar": number;
        "vitamin.a": number;
        "vitamin.b1": number;
        "vitamin.b12": number;
        "vitamin.b2": number;
        "vitamin.b6": number;
        "vitamin.d": number;
        "vitamin.e": number;
    }>;
    updated_at: z.ZodString;
    servings: z.ZodArray<z.ZodObject<{
        serving: z.ZodString;
        amount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        serving: string;
        amount: number;
    }, {
        serving: string;
        amount: number;
    }>, "many">;
    base_unit: z.ZodString;
    eans: z.ZodArray<z.ZodString, "many">;
    language: z.ZodString;
    countries: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    is_verified: boolean;
    is_private: boolean;
    is_deleted: boolean;
    has_ean: boolean;
    category: string;
    producer: string | null;
    nutrients: {
        "energy.energy": number;
        "mineral.calcium": number;
        "mineral.chlorine": number;
        "mineral.copper": number;
        "mineral.fluorine": number;
        "mineral.iron": number;
        "mineral.magnesium": number;
        "mineral.manganese": number;
        "mineral.phosphorus": number;
        "mineral.potassium": number;
        "mineral.sulfur": number;
        "mineral.zinc": number;
        "nutrient.carb": number;
        "nutrient.dietaryfiber": number;
        "nutrient.fat": number;
        "nutrient.protein": number;
        "nutrient.sugar": number;
        "vitamin.a": number;
        "vitamin.b1": number;
        "vitamin.b12": number;
        "vitamin.b2": number;
        "vitamin.b6": number;
        "vitamin.d": number;
        "vitamin.e": number;
    };
    updated_at: string;
    servings: {
        serving: string;
        amount: number;
    }[];
    base_unit: string;
    eans: string[];
    language: string;
    countries: string[];
}, {
    name: string;
    is_verified: boolean;
    is_private: boolean;
    is_deleted: boolean;
    has_ean: boolean;
    category: string;
    producer: string | null;
    nutrients: {
        "energy.energy": number;
        "mineral.calcium": number;
        "mineral.chlorine": number;
        "mineral.copper": number;
        "mineral.fluorine": number;
        "mineral.iron": number;
        "mineral.magnesium": number;
        "mineral.manganese": number;
        "mineral.phosphorus": number;
        "mineral.potassium": number;
        "mineral.sulfur": number;
        "mineral.zinc": number;
        "nutrient.carb": number;
        "nutrient.dietaryfiber": number;
        "nutrient.fat": number;
        "nutrient.protein": number;
        "nutrient.sugar": number;
        "vitamin.a": number;
        "vitamin.b1": number;
        "vitamin.b12": number;
        "vitamin.b2": number;
        "vitamin.b6": number;
        "vitamin.d": number;
        "vitamin.e": number;
    };
    updated_at: string;
    servings: {
        serving: string;
        amount: number;
    }[];
    base_unit: string;
    eans: string[];
    language: string;
    countries: string[];
}>;
type Product = z.infer<typeof ProductSchema>;
/**
 * Get the details of a specific product.
 *
 * @param token - The token to use for authentication.
 * @param id - The ID of the product to get.
 *
 * @returns - Promise resolving to the product details or `null`.
 */
declare const getProduct: (token: Token, id: string) => Promise<Product | null>;

declare const SearchProductOptionsSchema: z.ZodObject<{
    query: z.ZodString;
    sex: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"male">, z.ZodLiteral<"female">]>>;
    countries: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    locales: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    query: string;
    sex?: "male" | "female" | undefined;
    countries?: string[] | undefined;
    locales?: string[] | undefined;
}, {
    query: string;
    sex?: "male" | "female" | undefined;
    countries?: string[] | undefined;
    locales?: string[] | undefined;
}>;
type SearchProductOptions = z.infer<typeof SearchProductOptionsSchema>;
declare const ProductSearchResultSchema: z.ZodObject<{
    score: z.ZodNumber;
    name: z.ZodString;
    product_id: z.ZodString;
    serving: z.ZodString;
    serving_quantity: z.ZodNumber;
    amount: z.ZodNumber;
    base_unit: z.ZodString;
    producer: z.ZodString;
    is_verified: z.ZodBoolean;
    nutrients: z.ZodObject<{
        "energy.energy": z.ZodNumber;
        "nutrient.carb": z.ZodNumber;
        "nutrient.protein": z.ZodNumber;
        "nutrient.fat": z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        "energy.energy": number;
        "nutrient.carb": number;
        "nutrient.fat": number;
        "nutrient.protein": number;
    }, {
        "energy.energy": number;
        "nutrient.carb": number;
        "nutrient.fat": number;
        "nutrient.protein": number;
    }>;
    countries: z.ZodArray<z.ZodString, "many">;
    language: z.ZodString;
}, "strip", z.ZodTypeAny, {
    serving: string;
    amount: number;
    name: string;
    is_verified: boolean;
    producer: string;
    nutrients: {
        "energy.energy": number;
        "nutrient.carb": number;
        "nutrient.fat": number;
        "nutrient.protein": number;
    };
    base_unit: string;
    language: string;
    countries: string[];
    score: number;
    product_id: string;
    serving_quantity: number;
}, {
    serving: string;
    amount: number;
    name: string;
    is_verified: boolean;
    producer: string;
    nutrients: {
        "energy.energy": number;
        "nutrient.carb": number;
        "nutrient.fat": number;
        "nutrient.protein": number;
    };
    base_unit: string;
    language: string;
    countries: string[];
    score: number;
    product_id: string;
    serving_quantity: number;
}>;
type ProductSearchResult = z.infer<typeof ProductSearchResultSchema>;
/**
 * Search for products by a query.
 *
 * @param token - The token to use for authentication.
 * @param options - Options to customize the search.
 *
 * @returns - Promise resolving to the search results.
 */
declare const searchProducts: (token: Token, options: SearchProductOptions) => Promise<Array<ProductSearchResult>>;

declare const GetUserWeightOptionsSchema: z.ZodObject<{
    date: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    date?: Date | undefined;
}, {
    date?: Date | undefined;
}>;
type GetUserWeightOptions = z.infer<typeof GetUserWeightOptionsSchema>;
declare const UserWeightSchema: z.ZodObject<{
    id: z.ZodString;
    date: z.ZodString;
    value: z.ZodNullable<z.ZodNumber>;
    external_id: z.ZodNullable<z.ZodString>;
    gateway: z.ZodNullable<z.ZodString>;
    source: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    value: number | null;
    date: string;
    id: string;
    external_id: string | null;
    gateway: string | null;
    source: string | null;
}, {
    value: number | null;
    date: string;
    id: string;
    external_id: string | null;
    gateway: string | null;
    source: string | null;
}>;
type UserWeight = z.infer<typeof UserWeightSchema>;
/**
 * Get the last weight entry of the user, optionally for a specific day.
 *
 * @param token - The token to use for authentication.
 * @param options - Optional options to customize the request.
 *
 * @returns - Promise resolving the latest weight entry of the user.
 */
declare const getUserWeight: (token: Token, options?: GetUserWeightOptions) => Promise<UserWeight | null>;

declare const GetUserSuggestedProductsOptionsSchema: z.ZodObject<{
    date: z.ZodOptional<z.ZodDate>;
    daytime: z.ZodEnum<["breakfast", "lunch", "dinner", "snack"]>;
}, "strip", z.ZodTypeAny, {
    daytime: "breakfast" | "lunch" | "dinner" | "snack";
    date?: Date | undefined;
}, {
    daytime: "breakfast" | "lunch" | "dinner" | "snack";
    date?: Date | undefined;
}>;
type GetUserSuggestedProductsOptions = z.infer<typeof GetUserSuggestedProductsOptionsSchema>;
declare const UserSuggestedProductSchema: z.ZodObject<{
    product_id: z.ZodString;
    amount: z.ZodNumber;
    serving: z.ZodNullable<z.ZodString>;
    serving_quantity: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    serving: string | null;
    amount: number;
    product_id: string;
    serving_quantity: number | null;
}, {
    serving: string | null;
    amount: number;
    product_id: string;
    serving_quantity: number | null;
}>;
type UserSuggestedProduct = z.infer<typeof UserSuggestedProductSchema>;
/**
 * Get the suggested products for a user for a specific daytime, optionally
 * for a specific day.
 *
 * @param token - Token to use for authentication.
 * @param options - Options for the request.
 */
declare const getUserSuggestedProducts: (token: Token, options: GetUserSuggestedProductsOptions) => Promise<Array<UserSuggestedProduct>>;

declare const GetUserConsumedItemsOptionsSchema: z.ZodObject<{
    date: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    date?: Date | undefined;
}, {
    date?: Date | undefined;
}>;
type GetUserConsumedItemsOptions = z.infer<typeof GetUserConsumedItemsOptionsSchema>;
declare const UserConsumedItemSchema: z.ZodObject<{
    id: z.ZodString;
    date: z.ZodString;
    daytime: z.ZodEnum<["breakfast", "lunch", "dinner", "snack"]>;
    type: z.ZodString;
    product_id: z.ZodString;
    amount: z.ZodNullable<z.ZodNumber>;
    serving: z.ZodNullable<z.ZodString>;
    serving_quantity: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: string;
    date: string;
    serving: string | null;
    amount: number | null;
    id: string;
    product_id: string;
    serving_quantity: number | null;
    daytime: "breakfast" | "lunch" | "dinner" | "snack";
}, {
    type: string;
    date: string;
    serving: string | null;
    amount: number | null;
    id: string;
    product_id: string;
    serving_quantity: number | null;
    daytime: "breakfast" | "lunch" | "dinner" | "snack";
}>;
type UserConsumedItem = z.infer<typeof UserConsumedItemSchema>;
/**
 * Get the consumed items of the user, optionally for a specific day.
 *
 * @param token - The token to use for authentication.
 * @param options - Optional options to customize the request.
 *
 * @returns - Promise resolving to the user consumed items.
 */
declare const getUserConsumedItems: (token: Token, options?: GetUserConsumedItemsOptions) => Promise<{
    products: Array<UserConsumedItem>;
    recipe_portions: Array<unknown>;
    simple_products: Array<unknown>;
}>;

declare const GetUserExercisesOptionsSchema: z.ZodObject<{
    date: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    date?: Date | undefined;
}, {
    date?: Date | undefined;
}>;
type GetUserExercisesOptions = z.infer<typeof GetUserExercisesOptionsSchema>;
declare const ExerciseSchema: z.ZodObject<{
    id: z.ZodString;
    note: z.ZodNullable<z.ZodString>;
    date: z.ZodString;
    name: z.ZodString;
    external_id: z.ZodNullable<z.ZodString>;
    energy: z.ZodNumber;
    distance: z.ZodNumber;
    duration: z.ZodNumber;
    source: z.ZodNullable<z.ZodString>;
    gateway: z.ZodNullable<z.ZodString>;
    steps: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    date: string;
    name: string;
    id: string;
    external_id: string | null;
    gateway: string | null;
    source: string | null;
    note: string | null;
    energy: number;
    distance: number;
    duration: number;
    steps: number;
}, {
    date: string;
    name: string;
    id: string;
    external_id: string | null;
    gateway: string | null;
    source: string | null;
    note: string | null;
    energy: number;
    distance: number;
    duration: number;
    steps: number;
}>;
type Exercise = z.infer<typeof ExerciseSchema>;
/**
 * Get the exercises done by the user, optionally for a specific day.
 *
 * @param token - The token to use for authentication.
 * @param options - Optional options to customize the request.
 *
 * @returns - Promise resolving to the user exercises.
 */
declare const getUserExercises: (token: Token, options?: GetUserExercisesOptions) => Promise<{
    training: Array<Exercise>;
    custom_training: Array<Exercise>;
}>;

declare const GetUserGoalsOptionsSchema: z.ZodObject<{
    date: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    date?: Date | undefined;
}, {
    date?: Date | undefined;
}>;
type GetUserGoalsOptions = z.infer<typeof GetUserGoalsOptionsSchema>;
declare const UserGoalsSchema: z.ZodObject<{
    "energy.energy": z.ZodNumber;
    "nutrient.protein": z.ZodNumber;
    "nutrient.fat": z.ZodNumber;
    "nutrient.carb": z.ZodNumber;
    "activity.step": z.ZodNumber;
    "bodyvalue.weight": z.ZodNumber;
    water: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    "energy.energy": number;
    "nutrient.carb": number;
    "nutrient.fat": number;
    "nutrient.protein": number;
    "activity.step": number;
    "bodyvalue.weight": number;
    water: number;
}, {
    "energy.energy": number;
    "nutrient.carb": number;
    "nutrient.fat": number;
    "nutrient.protein": number;
    "activity.step": number;
    "bodyvalue.weight": number;
    water: number;
}>;
type UserGoals = z.infer<typeof UserGoalsSchema>;
/**
 * Get the goals of the user, optionally for a specific day.
 *
 * @param token - The token to use for authentication.
 * @param options - Optional options to customize the request.
 *
 * @returns - Promise resolving to the user goals.
 */
declare const getUserGoals: (token: Token, options?: GetUserGoalsOptions) => Promise<UserGoals>;

declare const GetUserDailySummaryOptions: z.ZodObject<{
    date: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    date?: Date | undefined;
}, {
    date?: Date | undefined;
}>;
type GetUserDailySummaryOptions = z.infer<typeof GetUserDailySummaryOptions>;
declare const UserDailySummarySchema: z.ZodObject<{
    activity_energy: z.ZodNumber;
    consume_activity_energy: z.ZodBoolean;
    steps: z.ZodNumber;
    water_intake: z.ZodNumber;
    goals: z.ZodObject<{
        "energy.energy": z.ZodNumber;
        water: z.ZodNumber;
        "activity.step": z.ZodNumber;
        "nutrient.protein": z.ZodNumber;
        "nutrient.fat": z.ZodNumber;
        "nutrient.carb": z.ZodNumber;
        "bodyvalue.weight": z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        "energy.energy": number;
        "nutrient.carb": number;
        "nutrient.fat": number;
        "nutrient.protein": number;
        "activity.step": number;
        "bodyvalue.weight": number;
        water: number;
    }, {
        "energy.energy": number;
        "nutrient.carb": number;
        "nutrient.fat": number;
        "nutrient.protein": number;
        "activity.step": number;
        "bodyvalue.weight": number;
        water: number;
    }>;
    units: z.ZodObject<{
        unit_mass: z.ZodString;
        unit_energy: z.ZodString;
        unit_serving: z.ZodString;
        unit_length: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        unit_mass: string;
        unit_energy: string;
        unit_serving: string;
        unit_length: string;
    }, {
        unit_mass: string;
        unit_energy: string;
        unit_serving: string;
        unit_length: string;
    }>;
    meals: z.ZodObject<{
        breakfast: z.ZodObject<{
            energy_goal: z.ZodNumber;
            nutrients: z.ZodObject<{
                "energy.energy": z.ZodNumber;
                "nutrient.carb": z.ZodNumber;
                "nutrient.protein": z.ZodNumber;
                "nutrient.fat": z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            }, {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            }>;
        }, "strip", z.ZodTypeAny, {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        }, {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        }>;
        lunch: z.ZodObject<{
            energy_goal: z.ZodNumber;
            nutrients: z.ZodObject<{
                "energy.energy": z.ZodNumber;
                "nutrient.carb": z.ZodNumber;
                "nutrient.protein": z.ZodNumber;
                "nutrient.fat": z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            }, {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            }>;
        }, "strip", z.ZodTypeAny, {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        }, {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        }>;
        dinner: z.ZodObject<{
            energy_goal: z.ZodNumber;
            nutrients: z.ZodObject<{
                "energy.energy": z.ZodNumber;
                "nutrient.carb": z.ZodNumber;
                "nutrient.protein": z.ZodNumber;
                "nutrient.fat": z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            }, {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            }>;
        }, "strip", z.ZodTypeAny, {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        }, {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        }>;
        snack: z.ZodObject<{
            energy_goal: z.ZodNumber;
            nutrients: z.ZodObject<{
                "energy.energy": z.ZodNumber;
                "nutrient.carb": z.ZodNumber;
                "nutrient.protein": z.ZodNumber;
                "nutrient.fat": z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            }, {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            }>;
        }, "strip", z.ZodTypeAny, {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        }, {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        breakfast: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
        lunch: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
        dinner: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
        snack: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
    }, {
        breakfast: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
        lunch: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
        dinner: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
        snack: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
    }>;
    user: z.ZodObject<{
        start_weight: z.ZodOptional<z.ZodNumber>;
        current_weight: z.ZodOptional<z.ZodNumber>;
        goal: z.ZodOptional<z.ZodString>;
        sex: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        start_weight?: number | undefined;
        current_weight?: number | undefined;
        goal?: string | undefined;
        sex?: string | undefined;
    }, {
        start_weight?: number | undefined;
        current_weight?: number | undefined;
        goal?: string | undefined;
        sex?: string | undefined;
    }>;
    active_fasting_countdown_template_key: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    steps: number;
    activity_energy: number;
    consume_activity_energy: boolean;
    water_intake: number;
    goals: {
        "energy.energy": number;
        "nutrient.carb": number;
        "nutrient.fat": number;
        "nutrient.protein": number;
        "activity.step": number;
        "bodyvalue.weight": number;
        water: number;
    };
    units: {
        unit_mass: string;
        unit_energy: string;
        unit_serving: string;
        unit_length: string;
    };
    meals: {
        breakfast: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
        lunch: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
        dinner: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
        snack: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
    };
    user: {
        start_weight?: number | undefined;
        current_weight?: number | undefined;
        goal?: string | undefined;
        sex?: string | undefined;
    };
    active_fasting_countdown_template_key: string | null;
}, {
    steps: number;
    activity_energy: number;
    consume_activity_energy: boolean;
    water_intake: number;
    goals: {
        "energy.energy": number;
        "nutrient.carb": number;
        "nutrient.fat": number;
        "nutrient.protein": number;
        "activity.step": number;
        "bodyvalue.weight": number;
        water: number;
    };
    units: {
        unit_mass: string;
        unit_energy: string;
        unit_serving: string;
        unit_length: string;
    };
    meals: {
        breakfast: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
        lunch: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
        dinner: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
        snack: {
            nutrients: {
                "energy.energy": number;
                "nutrient.carb": number;
                "nutrient.fat": number;
                "nutrient.protein": number;
            };
            energy_goal: number;
        };
    };
    user: {
        start_weight?: number | undefined;
        current_weight?: number | undefined;
        goal?: string | undefined;
        sex?: string | undefined;
    };
    active_fasting_countdown_template_key: string | null;
}>;
type UserDailySummary = z.infer<typeof UserDailySummarySchema>;
/**
 * Get the daily summary for a specific day.
 *
 * @param token - Token to use for authentication.
 * @param options - Options for the request.
 *
 * @returns - Promise resolving the daily summary.
 */
declare const getUserDailySummary: (token: Token, options?: GetUserDailySummaryOptions) => Promise<UserDailySummary>;

declare const GetUserWaterIntakeOptionsSchema: z.ZodObject<{
    date: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    date?: Date | undefined;
}, {
    date?: Date | undefined;
}>;
type GetUserWaterIntakeOptions = z.infer<typeof GetUserWaterIntakeOptionsSchema>;
declare const UserWaterIntakeSchema: z.ZodObject<{
    water_intake: z.ZodNumber;
    gateway: z.ZodNullable<z.ZodString>;
    source: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    gateway: string | null;
    source: string | null;
    water_intake: number;
}, {
    gateway: string | null;
    source: string | null;
    water_intake: number;
}>;
type UserWaterIntake = z.infer<typeof UserWaterIntakeSchema>;
/**
 * Get the water intake of the user, optionally for a specific day.
 *
 * @param token - The token to use for authentication.
 * @param options - Optional options to customize the request.
 *
 * @returns - Promise resolving to the user water intake.
 */
declare const getUserWaterIntake: (token: Token, options?: GetUserWaterIntakeOptions) => Promise<UserWaterIntake>;

export { getUserWeight as a, getUserSuggestedProducts as b, getUserConsumedItems as c, getUserExercises as d, getUserGoals as e, getUserWaterIntake as f, getProduct as g, getUserDailySummary as h, searchProducts as s };
