import { C as Credentials, T as Token } from './auth-BtDcQtvk.mjs';
export { i as addUserConsumedItem, g as getProduct, h as getUserConsumedItems, f as getUserDailySummary, c as getUserExercises, d as getUserGoals, b as getUserSuggestedProducts, e as getUserWaterIntake, a as getUserWeight, r as removeUserConsumedItem, s as searchProducts } from './water-DvYRUyo8.mjs';
import { z } from 'zod';

/**
 * Get either a fresh token pair or one that has previously been stored in
 * memory from a previous request run.
 *
 * @param credentials - Credentials object containing the username and password.
 *
 * @returns - Promise resolving to a Token object containing the key pairs. This
 * is retrieved either from memory or from the API.
 */
declare const getTokenFromCredentials: (credentials: Credentials) => Promise<Token>;

declare const UserDietaryPreferencesSchema: z.ZodObject<{
    restriction: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    restriction: string | null;
}, {
    restriction: string | null;
}>;
type UserDietaryPreferences = z.infer<typeof UserDietaryPreferencesSchema>;
/**
 * Get the dietary preferences of the user.
 *
 * @param token - The token to use for authentication.
 *
 * @returns - Promise resolving to the user dietary preferences.
 */
declare const getUserDietaryPreferences: (token: Token) => Promise<UserDietaryPreferences>;

declare const UserSettingsSchema: z.ZodObject<{
    has_water_tracker: z.ZodBoolean;
    has_diary_tipps: z.ZodBoolean;
    has_meal_reminders: z.ZodBoolean;
    has_usage_reminders: z.ZodBoolean;
    has_weight_reminders: z.ZodBoolean;
    has_water_reminders: z.ZodBoolean;
    consume_activity_calories: z.ZodBoolean;
    has_feelings: z.ZodBoolean;
    has_fasting_tracker_reminders: z.ZodBoolean;
    has_fasting_stage_reminders: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    has_water_tracker: boolean;
    has_diary_tipps: boolean;
    has_meal_reminders: boolean;
    has_usage_reminders: boolean;
    has_weight_reminders: boolean;
    has_water_reminders: boolean;
    consume_activity_calories: boolean;
    has_feelings: boolean;
    has_fasting_tracker_reminders: boolean;
    has_fasting_stage_reminders: boolean;
}, {
    has_water_tracker: boolean;
    has_diary_tipps: boolean;
    has_meal_reminders: boolean;
    has_usage_reminders: boolean;
    has_weight_reminders: boolean;
    has_water_reminders: boolean;
    consume_activity_calories: boolean;
    has_feelings: boolean;
    has_fasting_tracker_reminders: boolean;
    has_fasting_stage_reminders: boolean;
}>;
type UserSettings = z.infer<typeof UserSettingsSchema>;
/**
 * Get the user settings.
 *
 * @param token - The token to use for authentication.
 *
 * @returns - Promise resolving to the user settings.
 */
declare const getUserSettings: (token: Token) => Promise<UserSettings>;

declare const UserSchema: z.ZodObject<{
    diet: z.ZodNullable<z.ZodObject<{
        carb_percentage: z.ZodNumber;
        fat_percentage: z.ZodNumber;
        protein_percentage: z.ZodNumber;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        carb_percentage: number;
        fat_percentage: number;
        protein_percentage: number;
    }, {
        name: string;
        carb_percentage: number;
        fat_percentage: number;
        protein_percentage: number;
    }>>;
    email: z.ZodString;
    premium_type: z.ZodString;
    sex: z.ZodEnum<["male", "female", "other"]>;
    first_name: z.ZodString;
    last_name: z.ZodString;
    city: z.ZodString;
    country: z.ZodString;
    weight_change_per_week: z.ZodNumber;
    body_height: z.ZodNumber;
    goal: z.ZodString;
    date_of_birth: z.ZodString;
    registration_date: z.ZodString;
    timezone_offset: z.ZodNumber;
    unit_length: z.ZodString;
    unit_mass: z.ZodString;
    unit_glucose: z.ZodString;
    unit_serving: z.ZodString;
    unit_energy: z.ZodString;
    food_database_country: z.ZodString;
    profile_image: z.ZodString;
    user_token: z.ZodString;
    start_weight: z.ZodNumber;
    email_confirmation_status: z.ZodEnum<["confirmed", "unconfirmed"]>;
    newsletter_opt_in: z.ZodBoolean;
    login_type: z.ZodString;
    siwa_user_id: z.ZodNullable<z.ZodString>;
    uuid: z.ZodString;
    reset_date: z.ZodNullable<z.ZodString>;
    activity_degree: z.ZodString;
    stripe_customer_id: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    sex: "male" | "female" | "other";
    unit_mass: string;
    unit_energy: string;
    unit_serving: string;
    unit_length: string;
    start_weight: number;
    goal: string;
    diet: {
        name: string;
        carb_percentage: number;
        fat_percentage: number;
        protein_percentage: number;
    } | null;
    email: string;
    premium_type: string;
    first_name: string;
    last_name: string;
    city: string;
    country: string;
    weight_change_per_week: number;
    body_height: number;
    date_of_birth: string;
    registration_date: string;
    timezone_offset: number;
    unit_glucose: string;
    food_database_country: string;
    profile_image: string;
    user_token: string;
    email_confirmation_status: "confirmed" | "unconfirmed";
    newsletter_opt_in: boolean;
    login_type: string;
    siwa_user_id: string | null;
    uuid: string;
    reset_date: string | null;
    activity_degree: string;
    stripe_customer_id: string | null;
}, {
    sex: "male" | "female" | "other";
    unit_mass: string;
    unit_energy: string;
    unit_serving: string;
    unit_length: string;
    start_weight: number;
    goal: string;
    diet: {
        name: string;
        carb_percentage: number;
        fat_percentage: number;
        protein_percentage: number;
    } | null;
    email: string;
    premium_type: string;
    first_name: string;
    last_name: string;
    city: string;
    country: string;
    weight_change_per_week: number;
    body_height: number;
    date_of_birth: string;
    registration_date: string;
    timezone_offset: number;
    unit_glucose: string;
    food_database_country: string;
    profile_image: string;
    user_token: string;
    email_confirmation_status: "confirmed" | "unconfirmed";
    newsletter_opt_in: boolean;
    login_type: string;
    siwa_user_id: string | null;
    uuid: string;
    reset_date: string | null;
    activity_degree: string;
    stripe_customer_id: string | null;
}>;
type User = z.infer<typeof UserSchema>;
/**
 * Get the user details.
 *
 * @param token - The token to use for authentication.
 *
 * @returns - Promise resolving to the user details.
 */
declare const getUser: (token: Token) => Promise<User>;

export { getTokenFromCredentials, getUser, getUserDietaryPreferences, getUserSettings };
